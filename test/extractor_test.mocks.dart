// Mocks generated by Mockito 5.1.0 from annotations
// in typingthon/test/extractor_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:convert' as _i9;
import 'dart:io' as _i12;
import 'dart:typed_data' as _i10;

import 'package:firebase_core/firebase_core.dart' as _i4;
import 'package:firebase_storage/firebase_storage.dart' as _i5;
import 'package:firebase_storage_platform_interface/firebase_storage_platform_interface.dart'
    as _i6;
import 'package:http/src/base_request.dart' as _i11;
import 'package:http/src/client.dart' as _i7;
import 'package:http/src/response.dart' as _i2;
import 'package:http/src/streamed_response.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponse_0 extends _i1.Fake implements _i2.Response {}

class _FakeStreamedResponse_1 extends _i1.Fake implements _i3.StreamedResponse {
}

class _FakeFirebaseApp_2 extends _i1.Fake implements _i4.FirebaseApp {}

class _FakeDuration_3 extends _i1.Fake implements Duration {}

class _FakeReference_4 extends _i1.Fake implements _i5.Reference {}

class _FakeFirebaseStorage_5 extends _i1.Fake implements _i5.FirebaseStorage {}

class _FakeFullMetadata_6 extends _i1.Fake implements _i6.FullMetadata {}

class _FakeListResult_7 extends _i1.Fake implements _i5.ListResult {}

class _FakeUploadTask_8 extends _i1.Fake implements _i5.UploadTask {}

class _FakeDownloadTask_9 extends _i1.Fake implements _i5.DownloadTask {}

class _FakeTaskSnapshot_10 extends _i1.Fake implements _i5.TaskSnapshot {}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i7.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i2.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i9.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i2.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i9.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i2.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i9.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i2.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i9.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i8.Future<_i2.Response>);
  @override
  _i8.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<_i10.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i10.Uint8List>.value(_i10.Uint8List(0)))
          as _i8.Future<_i10.Uint8List>);
  @override
  _i8.Future<_i3.StreamedResponse> send(_i11.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_1()))
          as _i8.Future<_i3.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [FirebaseStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseStorage extends _i1.Mock implements _i5.FirebaseStorage {
  MockFirebaseStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_2()) as _i4.FirebaseApp);
  @override
  set app(_i4.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  String get bucket =>
      (super.noSuchMethod(Invocation.getter(#bucket), returnValue: '')
          as String);
  @override
  set bucket(String? _bucket) =>
      super.noSuchMethod(Invocation.setter(#bucket, _bucket),
          returnValueForMissingStub: null);
  @override
  Duration get maxOperationRetryTime =>
      (super.noSuchMethod(Invocation.getter(#maxOperationRetryTime),
          returnValue: _FakeDuration_3()) as Duration);
  @override
  Duration get maxUploadRetryTime =>
      (super.noSuchMethod(Invocation.getter(#maxUploadRetryTime),
          returnValue: _FakeDuration_3()) as Duration);
  @override
  Duration get maxDownloadRetryTime =>
      (super.noSuchMethod(Invocation.getter(#maxDownloadRetryTime),
          returnValue: _FakeDuration_3()) as Duration);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i5.Reference ref([String? path]) =>
      (super.noSuchMethod(Invocation.method(#ref, [path]),
          returnValue: _FakeReference_4()) as _i5.Reference);
  @override
  _i5.Reference refFromURL(String? url) =>
      (super.noSuchMethod(Invocation.method(#refFromURL, [url]),
          returnValue: _FakeReference_4()) as _i5.Reference);
  @override
  void setMaxOperationRetryTime(Duration? time) =>
      super.noSuchMethod(Invocation.method(#setMaxOperationRetryTime, [time]),
          returnValueForMissingStub: null);
  @override
  void setMaxUploadRetryTime(Duration? time) =>
      super.noSuchMethod(Invocation.method(#setMaxUploadRetryTime, [time]),
          returnValueForMissingStub: null);
  @override
  void setMaxDownloadRetryTime(Duration? time) =>
      super.noSuchMethod(Invocation.method(#setMaxDownloadRetryTime, [time]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> useEmulator({String? host, int? port}) =>
      (super.noSuchMethod(
          Invocation.method(#useEmulator, [], {#host: host, #port: port}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> useStorageEmulator(String? host, int? port) =>
      (super.noSuchMethod(Invocation.method(#useStorageEmulator, [host, port]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [Reference].
///
/// See the documentation for Mockito's code generation for more information.
class MockReference extends _i1.Mock implements _i5.Reference {
  MockReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.FirebaseStorage get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
          returnValue: _FakeFirebaseStorage_5()) as _i5.FirebaseStorage);
  @override
  String get bucket =>
      (super.noSuchMethod(Invocation.getter(#bucket), returnValue: '')
          as String);
  @override
  String get fullPath =>
      (super.noSuchMethod(Invocation.getter(#fullPath), returnValue: '')
          as String);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i5.Reference get root => (super.noSuchMethod(Invocation.getter(#root),
      returnValue: _FakeReference_4()) as _i5.Reference);
  @override
  _i5.Reference child(String? path) =>
      (super.noSuchMethod(Invocation.method(#child, [path]),
          returnValue: _FakeReference_4()) as _i5.Reference);
  @override
  _i8.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<String> getDownloadURL() =>
      (super.noSuchMethod(Invocation.method(#getDownloadURL, []),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<_i6.FullMetadata> getMetadata() => (super.noSuchMethod(
          Invocation.method(#getMetadata, []),
          returnValue: Future<_i6.FullMetadata>.value(_FakeFullMetadata_6()))
      as _i8.Future<_i6.FullMetadata>);
  @override
  _i8.Future<_i5.ListResult> list([_i6.ListOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#list, [options]),
              returnValue: Future<_i5.ListResult>.value(_FakeListResult_7()))
          as _i8.Future<_i5.ListResult>);
  @override
  _i8.Future<_i5.ListResult> listAll() =>
      (super.noSuchMethod(Invocation.method(#listAll, []),
              returnValue: Future<_i5.ListResult>.value(_FakeListResult_7()))
          as _i8.Future<_i5.ListResult>);
  @override
  _i8.Future<_i10.Uint8List?> getData([int? maxSize = 10485760]) =>
      (super.noSuchMethod(Invocation.method(#getData, [maxSize]),
              returnValue: Future<_i10.Uint8List?>.value())
          as _i8.Future<_i10.Uint8List?>);
  @override
  _i5.UploadTask putData(_i10.Uint8List? data,
          [_i6.SettableMetadata? metadata]) =>
      (super.noSuchMethod(Invocation.method(#putData, [data, metadata]),
          returnValue: _FakeUploadTask_8()) as _i5.UploadTask);
  @override
  _i5.UploadTask putBlob(dynamic blob, [_i6.SettableMetadata? metadata]) =>
      (super.noSuchMethod(Invocation.method(#putBlob, [blob, metadata]),
          returnValue: _FakeUploadTask_8()) as _i5.UploadTask);
  @override
  _i5.UploadTask putFile(_i12.File? file, [_i6.SettableMetadata? metadata]) =>
      (super.noSuchMethod(Invocation.method(#putFile, [file, metadata]),
          returnValue: _FakeUploadTask_8()) as _i5.UploadTask);
  @override
  _i5.UploadTask putString(String? data,
          {_i6.PutStringFormat? format = _i6.PutStringFormat.raw,
          _i6.SettableMetadata? metadata}) =>
      (super.noSuchMethod(
          Invocation.method(
              #putString, [data], {#format: format, #metadata: metadata}),
          returnValue: _FakeUploadTask_8()) as _i5.UploadTask);
  @override
  _i8.Future<_i6.FullMetadata> updateMetadata(_i6.SettableMetadata? metadata) =>
      (super.noSuchMethod(Invocation.method(#updateMetadata, [metadata]),
              returnValue:
                  Future<_i6.FullMetadata>.value(_FakeFullMetadata_6()))
          as _i8.Future<_i6.FullMetadata>);
  @override
  _i5.DownloadTask writeToFile(_i12.File? file) =>
      (super.noSuchMethod(Invocation.method(#writeToFile, [file]),
          returnValue: _FakeDownloadTask_9()) as _i5.DownloadTask);
}

/// A class which mocks [UploadTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockUploadTask extends _i1.Mock implements _i5.UploadTask {
  MockUploadTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.FirebaseStorage get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
          returnValue: _FakeFirebaseStorage_5()) as _i5.FirebaseStorage);
  @override
  _i8.Stream<_i5.TaskSnapshot> get snapshotEvents =>
      (super.noSuchMethod(Invocation.getter(#snapshotEvents),
              returnValue: Stream<_i5.TaskSnapshot>.empty())
          as _i8.Stream<_i5.TaskSnapshot>);
  @override
  _i5.TaskSnapshot get snapshot =>
      (super.noSuchMethod(Invocation.getter(#snapshot),
          returnValue: _FakeTaskSnapshot_10()) as _i5.TaskSnapshot);
  @override
  _i8.Future<bool> pause() => (super.noSuchMethod(Invocation.method(#pause, []),
      returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<bool> resume() =>
      (super.noSuchMethod(Invocation.method(#resume, []),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<bool> cancel() =>
      (super.noSuchMethod(Invocation.method(#cancel, []),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Stream<_i5.TaskSnapshot> asStream() =>
      (super.noSuchMethod(Invocation.method(#asStream, []),
              returnValue: Stream<_i5.TaskSnapshot>.empty())
          as _i8.Stream<_i5.TaskSnapshot>);
  @override
  _i8.Future<_i5.TaskSnapshot> catchError(Function? onError,
          {bool Function(Object)? test}) =>
      (super.noSuchMethod(
              Invocation.method(#catchError, [onError], {#test: test}),
              returnValue:
                  Future<_i5.TaskSnapshot>.value(_FakeTaskSnapshot_10()))
          as _i8.Future<_i5.TaskSnapshot>);
  @override
  _i8.Future<S> then<S>(_i8.FutureOr<S>? Function(_i5.TaskSnapshot)? onValue,
          {Function? onError}) =>
      (super.noSuchMethod(
          Invocation.method(#then, [onValue], {#onError: onError}),
          returnValue: Future<S>.value(null)) as _i8.Future<S>);
  @override
  _i8.Future<_i5.TaskSnapshot> whenComplete(
          _i8.FutureOr<dynamic>? Function()? action) =>
      (super.noSuchMethod(Invocation.method(#whenComplete, [action]),
              returnValue:
                  Future<_i5.TaskSnapshot>.value(_FakeTaskSnapshot_10()))
          as _i8.Future<_i5.TaskSnapshot>);
  @override
  _i8.Future<_i5.TaskSnapshot> timeout(Duration? timeLimit,
          {_i8.FutureOr<_i5.TaskSnapshot> Function()? onTimeout}) =>
      (super.noSuchMethod(
              Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
              returnValue:
                  Future<_i5.TaskSnapshot>.value(_FakeTaskSnapshot_10()))
          as _i8.Future<_i5.TaskSnapshot>);
}
